#!/usr/bin/env bash

# Keep the existing settings
set -euo pipefail

# Functions
log_section() {
  echo -e "\n🔷 --- $1"
}

log_info() {
  echo -e "\033[36mℹ️  INFO:\033[0m $1"
}

log_success() {
  echo -e "\033[32m✅ SUCCESS:\033[0m $1"
}

log_warning() {
  echo -e "\033[33m⚠️  WARNING:\033[0m $1"
}

log_error() {
  echo -e "\033[31m❌ ERROR:\033[0m $1" >&2
}

check_required_env() {
  if [[ -z "${!1:-}" ]]; then
    log_error "Required environment variable $1 is not set"
    exit 1
  fi
}

add_ssh_host() {
  local host="$1"
  local fingerprint="$2"
  local tmp_file

  echo "home directory is $HOME"
  # Create .ssh directory if it doesn't exist
  echo "creating .ssh directory"

  if [ ! -d "$HOME/.ssh" ]; then
    echo "Creating .ssh directory..."
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
  else
      echo ".ssh directory already exists."
  fi

  # Create known_hosts file if it doesn't exist
  touch "$HOME/.ssh/known_hosts"

  # Check if host is already in known_hosts
  if ! grep -q "^$host" "$HOME/.ssh/known_hosts"; then
    log_info "$host not found in known_hosts"
    
    # Get host key
    tmp_file=$(mktemp)
    ssh-keyscan -t rsa "$host" > "$tmp_file"
    
    # Verify fingerprint
    local actual_fingerprint
    actual_fingerprint=$(ssh-keygen -lf "$tmp_file" | awk '{ print $2 }')
    
    if [[ "$actual_fingerprint" != "$fingerprint" ]]; then
      log_error "Fingerprint mismatch for $host. Expected $fingerprint, got $actual_fingerprint."
      rm "$tmp_file"
      exit 1
    fi
    
    # Add to known_hosts
    cat "$tmp_file" >> "$HOME/.ssh/known_hosts"
    rm "$tmp_file"
    log_info "$host added to known_hosts"
  fi
}

# Get repository name from URL
get_repo_name() {
  local repo_url="$1"
  basename "${repo_url}" .git
}

clone_repository() {
  local repo_url="$1"
  local checkout_ref="$2"
  local ssh_key_path="$3"
  local clone_dir="$4"
  local mirror_url="${5:-}"
  local clone_flags=("${@:6}")

  log_info "Cloning repository into '$clone_dir'"
  mkdir -p "$clone_dir"
  pushd "$clone_dir" > /dev/null

  if [[ -n "$ssh_key_path" ]]; then
    export GIT_SSH_COMMAND="ssh -i $ssh_key_path -o IdentitiesOnly=yes"
  fi

  if [[ -n "$mirror_url" ]]; then
    log_info "Trying to clone from mirror: $mirror_url"
    if git clone "${clone_flags[@]}" "$mirror_url" .; then
      log_success "Cloned from mirror: $mirror_url"
      git remote set-url origin "$repo_url"
    else
      log_warning "Mirror clone failed, falling back to original URL: $repo_url"
      git clone "${clone_flags[@]}" "$repo_url" .
    fi
  else
    git clone "${clone_flags[@]}" "$repo_url" .
  fi

  if [[ -n "$checkout_ref" ]]; then
    log_info "Checking out ref: $checkout_ref"
    git checkout "$checkout_ref"
  elif [[ -n "${BUILDKITE_COMMIT:-}" ]]; then
    log_info "Checking out commit: $BUILDKITE_COMMIT"
    git checkout "$BUILDKITE_COMMIT"
  fi

  if command -v git-lfs > /dev/null; then
    log_info "Setting up Git LFS"
    git lfs install
    git lfs pull
  fi

  popd > /dev/null
  log_info "Repository cloned successfully"
  return 0
}

# Main execution
log_section ":open_file_folder: Setting up workspace"

# Check for skip checkout
if [[ "${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_SKIP_CHECKOUT:-false}" == "true" ]]; then
  log_warning "🚫 Skipping default checkout as per configuration."
  
  # If we're just skipping checkout and no repos are specified, exit successfully
  if [[ -z "${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_0:-}" && -z "${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_0_URL:-}" ]]; then
    log_info "📝 No repositories configured for checkout, skipping repository checkout"
    exit 0
  fi
fi

# Ensure required environment variables are set
check_required_env "BUILDKITE_BUILD_CHECKOUT_PATH"
mkdir -p "$BUILDKITE_BUILD_CHECKOUT_PATH" || { log_error "Failed to create checkout path"; exit 1; }
cd "$BUILDKITE_BUILD_CHECKOUT_PATH" || { log_error "Failed to change to checkout path"; exit 1; }

log_section ":key: Configuring SSH"

# Add SSH hosts (configurable)
SSH_HOSTS=("github.com")
SSH_FINGERPRINTS=(
  "SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s"
)

for i in "${!SSH_HOSTS[@]}"; do
  add_ssh_host "${SSH_HOSTS[$i]}" "${SSH_FINGERPRINTS[$i]}"
done

log_section ":git: Starting repository checkout"

# Repository checkout loop
REPOS_COUNT=0
CLONE_SUCCESS=false

while true; do
  REPO_URL_VAR="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${REPOS_COUNT}_URL"
  REPO_MIRROR_URL_VAR="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${REPOS_COUNT}_MIRROR_URL"
  
  if [[ -z "${!REPO_URL_VAR:-}" ]]; then
    REPO_URL_VAR="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${REPOS_COUNT}"
    if [[ -z "${!REPO_URL_VAR:-}" ]]; then
      break
    fi
  fi
  
  REPO_URL="${!REPO_URL_VAR}"
  REPO_MIRROR_URL="${!REPO_MIRROR_URL_VAR:-}"
  log_info "Processing repository $REPOS_COUNT: $REPO_URL"
  
  REPO_REF_VAR="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${REPOS_COUNT}_REF"
  REPO_SSH_KEY_VAR="BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_REPOS_${REPOS_COUNT}_SSH_KEY_PATH"
  
  REPO_REF="${!REPO_REF_VAR:-}"
  REPO_SSH_KEY_PATH="${!REPO_SSH_KEY_VAR:-}"
  REPO_CLONE_FLAGS=()
  
  if clone_repository "$REPO_URL" "$REPO_REF" "$REPO_SSH_KEY_PATH" "$BUILDKITE_BUILD_CHECKOUT_PATH" "$REPO_MIRROR_URL" "${REPO_CLONE_FLAGS[@]+"${REPO_CLONE_FLAGS[@]}"}"; then
    CLONE_SUCCESS=true
    log_success "Successfully cloned repository $REPO_URL"
  else
    log_error "Failed to clone repository $REPO_URL"
    exit 1
  fi

  ((REPOS_COUNT++))
done || true

if [[ $REPOS_COUNT -eq 0 ]]; then
  # Only error if we're not in skip_checkout mode
  if [[ "${BUILDKITE_PLUGIN_CUSTOM_CHECKOUT_SKIP_CHECKOUT:-false}" != "true" ]]; then
    log_error "No repositories configured for checkout"
    exit 1
  fi
  exit 0
fi

if [[ "$CLONE_SUCCESS" == "true" ]]; then
  if [[ -d ".git" ]]; then
    if git rev-parse HEAD > /dev/null 2>&1; then
      COMMIT=$(git rev-parse HEAD)
      buildkite-agent meta-data set "buildkite:git:commit" "$COMMIT" || true
    fi
  fi
  log_info "All operations completed successfully"
  exit 0
else
  log_error "No repositories were successfully cloned"
  exit 1
fi
